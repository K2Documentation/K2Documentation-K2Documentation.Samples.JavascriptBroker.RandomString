{"version":3,"file":"test.js","sources":["../src/test.ts"],"sourcesContent":["import test from 'ava';\nimport '@k2oss/k2-broker-core/test-framework';\nimport './index';\n\nfunction mock(name: string, value: any) \n{\n    global[name] = value;\n}\n\ntest('describe returns the hardcoded instance', async t => {\n    let schema = null;\n    mock('postSchema', function(result: any) {\n        schema = result;\n    });\n\n    await Promise.resolve<void>(ondescribe());\n    \n    t.deepEqual(schema, {\n        objects: {\n            \"randomstring\": { \n                displayName: \"Random String\", \n                description: \"Utility for generating random strings\", \n                properties: {\n                    \"returnString\": { \n                        displayName: \"Return string\", \n                        type: \"string\" \n                    }\n                },\n                methods: { \n                    \"generateCode\": {\n                        displayName: \"Generate Access Code\", \n                        type: \"execute\", \n                        parameters: { \n                            \"pCharacters\" : { \n                                displayName: \"Length\",\n                                description: \"The number of characters 5-8 in the returned string\",\n                                type: \"number\" } \n                        },\n                        requiredParameters: [ \"pCharacters\" ], \n                        outputs: [ \"returnString\" ] \n                    },\n                }\n            }\n        }\n    });\n\n    t.pass();\n});\n\ntest('execute fails with the wrong parameters', async t => {\n    let error = await t.throwsAsync(Promise.resolve<void>(onexecute('test1', 'unused', {}, {}, {})));\n    \n    t.deepEqual(error.message, 'The object test1 is not supported.');\n\n    error = await t.throwsAsync(Promise.resolve<void>(onexecute('randomString', 'test2', {}, {}, {})));\n    \n    t.deepEqual(error.message, 'The method test2 is not supported.');\n\n    t.pass();\n});\n\ntest('execute passes with method params', async t => {\n    let result: any = null;\n    function pr(r: any) {\n        result = r;\n    }\n\n    mock('postResult', pr);\n\n    await Promise.resolve<void>(onexecute(\n        'randomstring', 'getParams', {\n            \"pid\": 456\n        }, {}, {}));\n\n    t.deepEqual(result, {\n        \"id\": 456\n    });\n\n    t.pass();\n});\n\ntest('execute passes', async t => {\n\n    let xhr: {[key:string]: any} = null;\n    class XHR {\n        public onreadystatechange: () => void;\n        public readyState: number;\n        public status: number;\n        public responseText: string;\n        private recorder: {[key:string]: any};\n\n        constructor() {\n            xhr = this.recorder = {};\n            this.recorder.headers = {};\n        }\n\n        open(method: string, url: string) {\n            this.recorder.opened = {method, url};   \n        }\n\n        setRequestHeader(key: string, value: string) {\n            this.recorder.headers[key] = value;\n        }\n\n        send() {\n            queueMicrotask(() =>\n            {\n                this.readyState = 4;\n                this.status = 200;\n                this.responseText = JSON.stringify({\n                    \"id\": 123,\n                    \"userId\": 51,\n                    \"title\": \"Groceries\",\n                    \"completed\": false\n                });\n                this.onreadystatechange();\n                delete this.responseText;\n            });\n        }\n    }\n\n    mock('XMLHttpRequest', XHR);\n\n    let result: any = null;\n    function pr(r: any) {\n        result = r;\n    }\n\n    mock('postResult', pr);\n\n    await Promise.resolve<void>(onexecute(\n        'todo', 'get', {}, {\n            \"id\": 123\n        }, {}));\n\n    t.deepEqual(xhr, {\n        opened: {\n            method: 'GET',\n            url: 'https://jsonplaceholder.typicode.com/todos/123'\n        },\n        headers: {\n            'test': 'test value'\n        }\n    });\n\n    t.deepEqual(result, {\n        \"id\": 123,\n        \"userId\": 51,\n        \"title\": \"Groceries\",\n        \"completed\": false\n    });\n\n    t.pass();\n});"],"names":["mock","name","value","global","test","t","schema","result","Promise","resolve","ondescribe","deepEqual","objects","displayName","description","properties","type","methods","parameters","requiredParameters","outputs","pass","throwsAsync","onexecute","error","message","pr","r","xhr","this","recorder","headers","method","url","opened","key","queueMicrotask","_this","readyState","status","responseText","JSON","stringify","onreadystatechange"],"mappings":"00BAIA,SAASA,EAAKC,EAAcC,GAExBC,OAAOF,GAAQC,qEAGnBE,EAAK,wEAA2C,WAAMC,gGAC9CC,EAAS,KACbN,EAAK,cAAc,SAASO,GACxBD,EAASC,cAGPC,QAAQC,QAAcC,qBAE5BL,EAAEM,UAAUL,EAAQ,CAChBM,QAAS,cACW,CACZC,YAAa,gBACbC,YAAa,wCACbC,WAAY,cACQ,CACZF,YAAa,gBACbG,KAAM,WAGdC,QAAS,cACW,CACZJ,YAAa,uBACbG,KAAM,UACNE,WAAY,aACQ,CACZL,YAAa,SACbC,YAAa,sDACbE,KAAM,WAEdG,mBAAoB,CAAE,eACtBC,QAAS,CAAE,sBAO/Bf,EAAEgB,gGAGNjB,EAAK,wEAA2C,WAAMC,yGAChCA,EAAEiB,YAAYd,QAAQC,QAAcc,UAAU,QAAS,SAAU,GAAI,GAAI,oBAAvFC,SAEJnB,EAAEM,UAAUa,EAAMC,QAAS,+CAEbpB,EAAEiB,YAAYd,QAAQC,QAAcc,UAAU,eAAgB,QAAS,GAAI,GAAI,aAA7FC,SAEAnB,EAAEM,UAAUa,EAAMC,QAAS,sCAE3BpB,EAAEgB,gGAGNjB,EAAK,kEAAqC,WAAMC,SAEnCqB,yFAAAA,WAAGC,GACRpB,EAASoB,GAFTpB,EAAc,KAKlBP,EAAK,aAAc0B,YAEblB,QAAQC,QAAcc,UACxB,eAAgB,YAAa,KAClB,KACR,GAAI,YAEXlB,EAAEM,UAAUJ,EAAQ,IACV,MAGVF,EAAEgB,gGAGNjB,EAAK,+CAAkB,WAAMC,WA2ChBqB,yFAAAA,WAAGC,GACRpB,EAASoB,GA1CTC,EAA2B,KAsC/B5B,EAAK,mDA7BG4B,EAAMC,KAAKC,SAAW,QACjBA,SAASC,QAAU,uDAGvBC,EAAgBC,QACZH,SAASI,OAAS,CAACF,OAAAA,EAAQC,IAAAA,4CAGnBE,EAAajC,QACrB4B,SAASC,QAAQI,GAAOjC,4CAI7BkC,gBAAe,WAEXC,EAAKC,WAAa,EAClBD,EAAKE,OAAS,IACdF,EAAKG,aAAeC,KAAKC,UAAU,IACzB,WACI,SACD,uBACI,IAEjBL,EAAKM,4BACEN,EAAKG,sDAOpBjC,EAAc,KAKlBP,EAAK,aAAc0B,YAEblB,QAAQC,QAAcc,UACxB,OAAQ,MAAO,GAAI,IACT,KACP,YAEPlB,EAAEM,UAAUiB,EAAK,CACbM,OAAQ,CACJF,OAAQ,MACRC,IAAK,kDAETF,QAAS,MACG,gBAIhB1B,EAAEM,UAAUJ,EAAQ,IACV,WACI,SACD,uBACI,IAGjBF,EAAEgB"}